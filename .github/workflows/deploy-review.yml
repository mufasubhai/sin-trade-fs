name: deploy-review

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test Services
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged
        ports:
          - 5173:5173
          - 5002:5002
          - 5004:5004

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build frontend Docker image
        run: docker build -t sin-trade-fe:latest --build-arg PORT=5173 ./sin-trade-fe

      - name: Build backend Docker image
        run: docker build -t sin-trade-be:latest --build-arg PORT=5002 ./sin-trade-be

      - name: Build data science Docker image
        run: docker build -t sin-trade-ds:latest --build-arg PORT=5004 ./sin-trade-ds

      - name: Run frontend container
        run: docker run -d --name sin-trade-fe -p 5173:5173 sin-trade-fe:latest

      - name: Wait for frontend to be healthy
        run: |
          for i in {1..15}; do
            if [ "$(docker inspect -f '{{.State.Health.Status}}' sin-trade-fe)" == "healthy" ]; then
              echo "Frontend container is healthy"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "Frontend container failed to become healthy"
              docker logs sin-trade-fe
              exit 1
            fi
            echo "Waiting for frontend container... attempt $i"
            sleep 10
          done

      - name: Run backend container
        run: docker run -d --name sin-trade-be -p 5002:5002
          -e FLASK_ENV=production
          -e PORT=5002
          -e SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          -e SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          sin-trade-be:latest

      - name: Wait for backend to be healthy
        run: |
          for i in {1..15}; do
            if [ "$(docker inspect -f '{{.State.Health.Status}}' sin-trade-be)" == "healthy" ]; then
              echo "Backend container is healthy"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "Backend container failed to become healthy"
              docker logs sin-trade-be
              exit 1
            fi
            echo "Waiting for backend container... attempt $i"
            sleep 10
          done

      - name: Run data science container
        run: docker run -d --name sin-trade-ds -p 5004:5004
          -e FLASK_ENV=production 
          -e PORT=5004
          -e SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          -e SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          sin-trade-ds:latest

      - name: Wait for data science to be healthy
        run: |
          for i in {1..15}; do
            if [ "$(docker inspect -f '{{.State.Health.Status}}' sin-trade-ds)" == "healthy" ]; then
              echo "Data science container is healthy"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "DS container failed to become healthy"
              docker logs sin-trade-ds
              exit 1
            fi
            echo "Waiting for data service container... attempt $i"
            sleep 10
          done

      - name: Run frontend tests
        run: docker exec sin-trade-fe pnpm test

      - name: Run backend tests
        run: docker exec sin-trade-be pytest

      - name: Run data science tests
        run: docker exec sin-trade-ds pytest

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Authenticate with Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo $HEROKU_API_KEY | heroku auth:token

      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build and push frontend Docker image to Heroku
        run: |
          docker build -t registry.heroku.com/sin-trade-fe/web ./sin-trade-fe
          docker push registry.heroku.com/sin-trade-fe/web

      - name: Release frontend app
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app sin-trade-fe

      - name: Build and push backend Docker image to Heroku
        run: |
          docker build -t registry.heroku.com/sin-trade-be/web ./sin-trade-be
          docker push registry.heroku.com/sin-trade-be/web

      - name: Release backend app
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app sin-trade-be

      - name: Build and push data science Docker image to Heroku
        run: |
          docker build -t registry.heroku.com/sin-trade-ds/web ./sin-trade-ds
          docker push registry.heroku.com/sin-trade-ds/web

      - name: Release data science app
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app sin-trade-ds
